!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG	log.h	/^		DEBUG = 1,$/;"	e	enum:sylar::LogLevel::Level
ERROR	log.h	/^		ERROR = 4,$/;"	e	enum:sylar::LogLevel::Level
FATAL	log.h	/^		FATAL = 5$/;"	e	enum:sylar::LogLevel::Level
FileAppender	log.cc	/^FileAppender::FileAppender(const std:string& filename)$/;"	f	class:sylar::FileAppender
FileAppender	log.h	/^class FileAppender:public LogAppender{$/;"	c	namespace:sylar
INFO	log.h	/^		INFO = 2,$/;"	e	enum:sylar::LogLevel::Level
Level	log.h	/^	enum Level{$/;"	g	class:sylar::LogLevel
LogAppender	log.h	/^class LogAppender{$/;"	c	namespace:sylar
LogEvent	log.h	/^class LogEvent{$/;"	c	namespace:sylar
LogFormater	log.h	/^class LogFormater{$/;"	c	namespace:sylar
LogLevel	log.h	/^class LogLevel{$/;"	c	namespace:sylar
Logger	log.cc	/^Logger::Logger(const std::string& name)$/;"	f	class:sylar::Logger
Logger	log.h	/^class Logger{$/;"	c	namespace:sylar
StdoutLogAppender	log.h	/^class StdoutLogAppender:public LogAppender{$/;"	c	namespace:sylar
WARN	log.h	/^		WARN = 3,$/;"	e	enum:sylar::LogLevel::Level
__SYLAR_LOG_H__	log.h	2;"	d
addAppender	log.cc	/^Logger::void addAppender(LogAppender::ptr appender){$/;"	f	class:sylar::Logger
debug	log.cc	/^void Logger::debug(LogEvent::ptr event){$/;"	f	class:sylar::Logger
delAppender	log.cc	/^Logger::void delAppender(LogAppender::ptr appender){$/;"	f	class:sylar::Logger
error	log.cc	/^void Logger::error(LogEvent::ptr event){$/;"	f	class:sylar::Logger
fatal	log.cc	/^void Logger::fatal(LogEvent::ptr event){$/;"	f	class:sylar::Logger
getFormatter	log.h	/^    LogFormater::ptr getFormatter() const { return m_formatter;}$/;"	f	class:sylar::LogAppender
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:sylar::Logger
info	log.cc	/^void Logger::info(LogEvent::ptr event){$/;"	f	class:sylar::Logger
log	log.cc	/^void FileAppender::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::FileAppender
log	log.cc	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event){$/;"	f	class:sylar::Logger
log	log.cc	/^void StdoutLogAppender::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::StdoutLogAppender
m_appenders	log.h	/^	std::list<LogAppender::ptr> m_appenders;           \/\/APPENDER集合$/;"	m	class:sylar::Logger
m_content	log.h	/^	std::string m_content;$/;"	m	class:sylar::LogEvent
m_elapse	log.h	/^	int32_t m_elapse = 0;			\/\/程序启动到现在的毫秒数$/;"	m	class:sylar::LogEvent
m_fiberId	log.h	/^	int32_t m_fiberId = 0;			\/\/协程id$/;"	m	class:sylar::LogEvent
m_file	log.h	/^	const char* m_file = nullptr; \/\/文件名$/;"	m	class:sylar::LogEvent
m_filename	log.h	/^    std::ofstream m_filename;$/;"	m	class:sylar::FileAppender
m_formatter	log.h	/^    LogFormater::ptr m_formatter;$/;"	m	class:sylar::LogAppender
m_level	log.h	/^	LogLevel::Level m_level;$/;"	m	class:sylar::LogAppender
m_level	log.h	/^	LogLevel::Level m_level;$/;"	m	class:sylar::Logger
m_line	log.h	/^	int32_t m_line = 0;				\/\/行号$/;"	m	class:sylar::LogEvent
m_name	log.h	/^	std::string m_name;         $/;"	m	class:sylar::Logger
m_name	log.h	/^    std::string  m_name;$/;"	m	class:sylar::FileAppender
m_threadId	log.h	/^	int32_t m_threadId = 0;			\/\/线程id$/;"	m	class:sylar::LogEvent
m_time	log.h	/^	uint64_t m_time;				\/\/时间戳$/;"	m	class:sylar::LogEvent
override	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:sylar::FileAppender
override	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:sylar::StdoutLogAppender
ptr	log.h	/^	typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:sylar::LogAppender
ptr	log.h	/^	typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:sylar::LogEvent
ptr	log.h	/^	typedef std::shared_ptr<LogFormater> ptr;$/;"	t	class:sylar::LogFormater
ptr	log.h	/^	typedef std::shared_ptr<Logger> ptr;$/;"	t	class:sylar::Logger
ptr	log.h	/^    typedef std::shared_ptr<FileAppender> ptr;$/;"	t	class:sylar::FileAppender
ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:sylar::StdoutLogAppender
reopen	log.cc	/^bool FileAppender::reopen(){$/;"	f	class:sylar::FileAppender
setFormatter	log.h	/^    void setFormatter(LogFormater::ptr val) { m_formatter = val;}$/;"	f	class:sylar::LogAppender
setLevel	log.h	/^    void setLevel(LogLevel::Level val){ m_level = val;}$/;"	f	class:sylar::Logger
sylar	log.cc	/^namespace sylar{$/;"	n	file:
sylar	log.h	/^namespace sylar{$/;"	n
warn	log.cc	/^void Logger::warn(LogEvent::ptr event){$/;"	f	class:sylar::Logger
~LogAppender	log.h	/^	virtual ~LogAppender(){}$/;"	f	class:sylar::LogAppender
